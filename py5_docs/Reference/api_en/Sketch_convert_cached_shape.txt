@@ meta
name = convert_cached_shape()
type = method
category = shape
subcategory = None

@@ signatures
convert_cached_shape(obj: Any, force_conversion: bool = False, **kwargs: dict[str, Any]) -> Py5Shape

@@ variables
force_conversion: bool = False - force conversion of object if it is already in the cache
kwargs: dict[str, Any] - keyword arguments for conversion function
obj: Any - object to convert into a Py5Shape object

@@ description
Convert non-py5 shape objects into Py5Shape objects, but cache the results. This method is similar to [](sketch_convert_shape) with the addition of an object cache. Both methods facilitates py5 compatibility with other commonly used Python libraries.

See [](sketch_convert_shape) for method details.

Converting objects to Py5Shape objects can sometimes be slow. Often times you will not want to repeatedly convert the same object in your `draw()` function. Writing code to convert an object once in `setup()` (with a `global` directive) to be later used in your `draw()` function can be a bit tedious. This method lets you write simpler code.

Your object must be hashable for object caching to work. If your object is not hashable, it cannot be cached and you will get a warning. If you want your code to ignore a previously cached object and force a re-conversion, use the `force_conversion` parameter.
