@@ meta
name = resize()
type = method
pclass = PImage
processing_name = resize

@@ signatures
resize(w: int, h: int, /) -> None
resize(w: int, h: int, interpolation_mode: int, /) -> None

@@ variables
h: int - height to size image to
interpolation_mode: int - interpolation method for resize operation
w: int - width to size image to

@@ description
Resize the Py5Image object to a new height and width. This will modify the Py5Image object in place, meaning that rather than returning a resized copy, it will modify your existing Py5Image object. If this isn't what you want, pair this method with [](py5image_copy), as shown in the example.

To make the image scale proportionally, use 0 as the value for either the `w` or `h` parameter.

The default resize interpolation mode is `BILINEAR`. Alternatively you can interpolate using the `NEAREST_NEIGHBOR` method, which is faster but yields the lowest quality results. You can also use `BICUBIC` interpolation, which is the most computationally intensive but looks the best, particularly for up-scaling operations.

@@ example
image = Py5Image_resize_0.png

def setup():
    py5.rect(10, 10, 80, 80)
    py5.fill(255, 0, 0)
    py5.rect(15, 15, 10, 60)
    img = py5.get_pixels()
    for x in [80, 60, 40]:
        img_copy = img.copy()
        img_copy.resize(x, 0, py5.BICUBIC)
        py5.image(img_copy, 100 - x, 100 - x)
